f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
f1
f2
int <- interaction(f1,f2)
int
str(int)
int <- interaction(f1,f2,drop = TRUe)
int <- interaction(f1,f2,drop = TRUe)
int <- interaction(f1,f2,drop = TRUE)
int
library(datasets)
data(iris)
?iris
str(iris)
s <- split(iris, iris$virginica)
s <- split(iris, iris$Species)
sapply(s, function(x) colMeans(x[,"virginica"]))
sapply(s, colMeans("virginica"))
s
sapply(s, colMeans("Sepal.Length"))
sapply(s, function(x) colMeans(x[,"Sepal.Length"]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
sapply(s, function(x) colMeans(x[,"Species"]))
sapply(s, function(x) colMeans(x[,c("Species")]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(s, function(x) mean(x,"Sepal.Length"))
sapply(s, function(x) mean("Sepal.Length"))
sapply(s, function(x) mean(x[,"Sepal.Length"]))
ans <- sapply(s, function(x) mean(x[,"Sepal.Length"]))
str(ans)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
ans1 <-apply(iris[, 1:4], 2, mean)
str(ans1)
attributes(ans1)
data(mtcars)
str(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
ans2 <- split(mtcars$mpg, mtcars$cyl)
ans2
str(ans2)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hpans <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hpans$8 - hpans$4
hpans("8")
hpans["8"]
hpans["8"] - hpans["4"]
unname(hpans["8"] - hpans["4"])
setwd("~/R/prog2/ProgrammingAssignment2")
myMatrix <- matrix(c(2,4,3,5),2,2)
myMatrix
makeCacheMatrix <- function(matrixData = matrix()) {
invMatrix <- NULL
## set function to create the cached matrixData
setMatrix <- function(y) {
matrixData <<- y
invMatrix <<- NULL
}
## get function to return the cached matrixData
getMatrix <- function() matrixData
## set function to create the cached inverted matrix
setInvMatrix <- function(i) invMatrix <<- i
## get function to return the cached inverted matrix
getInvMatrix <- function() invMatrix
## create the list of functions to return
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInvMatrix = setInvMatrix,
getInvMatrix = getInvMatrix)
}
cacheSolve <- function(mObj, ...) {
## try to get the inverted matrix
invMatrix <- mObj$getInvMatrix()
## Check to see if the inverted matrix exists, if it does,
## return it.
if(!is.null(invMatrix)) {
message("getting cached data")
return(m)
}
## Compute the inverted matrix, if it doesn't exist.
data <- mObj$getInvMatrix()
invMatrix <- solve(data, ...)
## Set the new inverted matrix to the environment.
mObj$setInvMatrix(invMatrix)
invMatrix
}
cacheSolve(makeCacheMatrix(myMatrix))
cacheSolve <- function(mObj, ...) {
## try to get the inverted matrix
invMatrix <- mObj$getInvMatrix()
## Check to see if the inverted matrix exists, if it does,
## return it.
if(!is.null(invMatrix)) {
message("getting cached data")
return(invMatrix)
}
## Compute the inverted matrix, if it doesn't exist.
data <- mObj$getInvMatrix()
invMatrix <- solve(data, ...)
## Set the new inverted matrix to the environment.
mObj$setInvMatrix(invMatrix)
invMatrix
}
cacheSolve(makeCacheMatrix(myMatrix))
myMatrix
solve(myMatrix)
cacheSolve <- function(mObj, ...) {
## try to get the inverted matrix
invMatrix <- mObj$getInvMatrix()
## Check to see if the inverted matrix exists, if it does,
## return it.
if(!is.null(invMatrix)) {
message("getting cached data")
return(invMatrix)
}
## Compute the inverted matrix, if it doesn't exist.
matrixData <- mObj$getInvMatrix()
invMatrix <- solve(matrixData, ...)
## Set the new inverted matrix to the environment.
mObj$setInvMatrix(invMatrix)
invMatrix
}
cacheSolve(makeCacheMatrix(myMatrix))
is.Null(myMatrix)
is.null(myMatrix)
debug(cacheSolve)
debug(makeCacheMatrix)
cacheSolve(makeCacheMatrix(myMatrix))
n
n
cacheSolve(makeCacheMatrix(myMatrix))
cacheSolve <- function(mObj, ...) {
## try to get the inverted matrix
invMatrix <- mObj$getInvMatrix()
## Check to see if the inverted matrix exists, if it does,
## return it.
if(!is.null(invMatrix)) {
message("getting cached data")
return(invMatrix)
}
## Compute the inverted matrix, if it doesn't exist.
matrixData <- mObj$getMatrix()
invMatrix <- solve(matrixData, ...)
## Set the new inverted matrix to the environment.
mObj$setInvMatrix(invMatrix)
invMatrix
}
undebug(cacheSolve)
undebug(makeCacheMatrix)
cacheSolve(makeCacheMatrix(myMatrix))
